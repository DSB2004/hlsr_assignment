// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}




model Auth{
  id   String    @id  @default(uuid())
  email String   @unique
  password String @db.Text
  isVerified Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt  DateTime @updatedAt
}



model User{
  id   String    @id  @default(uuid())
  authId String  @unique
  name String 
  phone String   @unique
  email String   @unique
  
  events Event[]   @relation("eventsOfUser")
  createdAt DateTime @default(now())
  updatedAt  DateTime @updatedAt

}


model Event{
  id   String    @id    @default(uuid())
  name  String
  description String?
  venue String 
  timing DateTime
  organiserId String 
  organiser User @relation("eventsOfUser",fields: [organiserId],references: [id])
  guest Guest[]  @relation("guestOfEvent")
  createdAt DateTime @default(now())
  updatedAt  DateTime @updatedAt
}


enum GuestRSVP{
  ACCEPTED
  DECLINED
  MAYBE
  PENDING
}


model Guest{
  id String @id   @default(uuid())
  name String 
  email String 
  phone String 
  eventId String
  event Event   @relation("guestOfEvent",references: [id],fields: [eventId])
  rsvp GuestRSVP @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([email,eventId])  
  // to ensure unique guest per event
}

